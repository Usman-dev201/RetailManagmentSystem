// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RMS.Models;

#nullable disable

namespace RMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250220072702_rms2")]
    partial class rms2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductRackRecord", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RackId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "RackId");

                    b.HasIndex("RackId");

                    b.ToTable("ProductRackRecord");
                });

            modelBuilder.Entity("RMS.Models.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("RMS.Models.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RMS.Models.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("CreditLimit")
                        .HasColumnType("real");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RMS.Models.Entities.CustomerFeedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackType")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("TransactionDetailId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("TransactionDetailId");

                    b.ToTable("CustomerFeedbacks");
                });

            modelBuilder.Entity("RMS.Models.Entities.CustomerLoyaltyRecord", b =>
                {
                    b.Property<int>("CustomerLoyaltyRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerLoyaltyRecordId"));

                    b.Property<int>("LoyaltyProgramId")
                        .HasColumnType("int");

                    b.Property<int>("PointsAccumulated")
                        .HasColumnType("int");

                    b.Property<int?>("PointsRedeemed")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("TransactionDetailId")
                        .HasColumnType("int");

                    b.HasKey("CustomerLoyaltyRecordId");

                    b.HasIndex("LoyaltyProgramId");

                    b.HasIndex("TransactionDetailId");

                    b.ToTable("CustomerLoyaltyRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<float>("DiscountAmount")
                        .HasColumnType("real");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<float>("MaxDiscountLimit")
                        .HasColumnType("real");

                    b.Property<float>("MinimumPurchaseAmount")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("RMS.Models.Entities.DraftOrder", b =>
                {
                    b.Property<int>("DraftOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DraftOrderId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayTerms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("DraftOrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("DraftOrders");
                });

            modelBuilder.Entity("RMS.Models.Entities.DraftOrderDetail", b =>
                {
                    b.Property<int>("DraftOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DraftOrderDetailId"));

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("DraftOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("DraftOrderDetailId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DraftOrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("DraftOrderDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.ExpenseCategory", b =>
                {
                    b.Property<int>("ExpenseCatergoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseCatergoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExpenseCatergoryId");

                    b.ToTable("ExpenseCategories");
                });

            modelBuilder.Entity("RMS.Models.Entities.ExpenseTracking", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseReturnId")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmout")
                        .HasColumnType("real");

                    b.HasKey("ExpenseId");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("PurchaseReturnId");

                    b.ToTable("ExpenseTrackings");
                });

            modelBuilder.Entity("RMS.Models.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoctionAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RMS.Models.Entities.LoyaltyProgram", b =>
                {
                    b.Property<int>("ProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DiscountPrercentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PointsPrePurchase")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProgramID");

                    b.ToTable("LoyaltyPrograms");
                });

            modelBuilder.Entity("RMS.Models.Entities.MarketingCampaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"));

                    b.Property<int>("ActionTaken")
                        .HasColumnType("int");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TargetAudience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampaignId");

                    b.ToTable("MarketingCampaigns");
                });

            modelBuilder.Entity("RMS.Models.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SellingPrice")
                        .HasColumnType("real");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RMS.Models.Entities.ProductPurchaseRecord", b =>
                {
                    b.Property<int>("LotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LotId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("LotId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductPurchaseRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.ProductTaxRecord", b =>
                {
                    b.Property<int>("ProductTaxRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTaxRecordId"));

                    b.Property<DateTime>("Effectivedate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TaxId")
                        .HasColumnType("int");

                    b.HasKey("ProductTaxRecordId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("ProductTaxRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.PurchaseRecord", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<float>("AmountPaid")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("PaymentDue")
                        .HasColumnType("real");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseStatus")
                        .HasColumnType("int");

                    b.Property<int>("QuantityBackOrdered")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOrder")
                        .HasColumnType("int");

                    b.Property<int>("QuantitySupplied")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("PurchaseId");

                    b.ToTable("PurchaseRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.PurchaseReturn", b =>
                {
                    b.Property<int>("PurchaseReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseReturnId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReturned")
                        .HasColumnType("int");

                    b.Property<string>("ReasonforRefund")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RefundAmount")
                        .HasColumnType("real");

                    b.Property<int>("RefundStatus")
                        .HasColumnType("int");

                    b.HasKey("PurchaseReturnId");

                    b.HasIndex("LotId");

                    b.ToTable("PurchaseReturns");
                });

            modelBuilder.Entity("RMS.Models.Entities.Rack", b =>
                {
                    b.Property<int>("RackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RackId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("RackCapacity")
                        .HasColumnType("int");

                    b.Property<string>("RackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RackId");

                    b.HasIndex("LocationId");

                    b.ToTable("Racks");
                });

            modelBuilder.Entity("RMS.Models.Entities.ReturnandExchange", b =>
                {
                    b.Property<int>("SalesReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesReturnId"));

                    b.Property<float>("RefundAmount")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReturnQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReturnStatus")
                        .HasColumnType("int");

                    b.Property<int>("TransactionDetailId")
                        .HasColumnType("int");

                    b.HasKey("SalesReturnId");

                    b.HasIndex("TransactionDetailId");

                    b.ToTable("ReturnandExchanges");
                });

            modelBuilder.Entity("RMS.Models.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RMS.Models.Entities.SalesCommissionAgent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<string>("AgentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactNo")
                        .HasColumnType("int");

                    b.Property<float>("SalesCommissionPercentage")
                        .HasColumnType("real");

                    b.Property<int?>("SalesTransactionTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionDetailId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AgentId");

                    b.HasIndex("SalesTransactionTransactionId");

                    b.HasIndex("TransactionDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("SalesCommissionAgents");
                });

            modelBuilder.Entity("RMS.Models.Entities.SalesTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PointsPerTransaction")
                        .HasColumnType("int");

                    b.Property<int>("ShippingStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TotalItems")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDateandTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("SalesTransactions");
                });

            modelBuilder.Entity("RMS.Models.Entities.SalesTransactionDetail", b =>
                {
                    b.Property<int>("TransactionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionDetailId"));

                    b.Property<float>("AmountPaid")
                        .HasColumnType("real");

                    b.Property<float>("Change")
                        .HasColumnType("real");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("DraftOrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("TransactionDetailId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DraftOrderDetailId")
                        .IsUnique();

                    b.HasIndex("StockId");

                    b.HasIndex("TransactionId");

                    b.ToTable("SalesTransactionDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.ShippingDetail", b =>
                {
                    b.Property<int>("ShippingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingId"));

                    b.Property<string>("CourierService")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstimatedDeliveryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("ShippingCost")
                        .HasColumnType("real");

                    b.Property<int>("ShippingMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TransactionDetailId")
                        .HasColumnType("int");

                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("ShippingId");

                    b.HasIndex("TransactionDetailId");

                    b.HasIndex("TransferId");

                    b.ToTable("ShippingDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<int>("CurrentStock")
                        .HasColumnType("int");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumStock")
                        .HasColumnType("int");

                    b.Property<int>("TotalUnitSold")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("LotId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("RMS.Models.Entities.StockAdjustment", b =>
                {
                    b.Property<int>("AdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdjustmentId"));

                    b.Property<int>("AdjustmentType")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseReturnId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAdjust")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesReturnId")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<float>("TotalAmountRecovered")
                        .HasColumnType("real");

                    b.HasKey("AdjustmentId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PurchaseReturnId")
                        .IsUnique();

                    b.HasIndex("SalesReturnId")
                        .IsUnique();

                    b.ToTable("StockAdjustments");
                });

            modelBuilder.Entity("RMS.Models.Entities.StockTransfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityTransfered")
                        .HasColumnType("int");

                    b.Property<float>("ShippingCharges")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("int");

                    b.HasKey("TransferId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("RMS.Models.Entities.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactNo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("RMS.Models.Entities.Tax", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaxId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TaxPercentage")
                        .HasColumnType("real");

                    b.HasKey("TaxId");

                    b.HasIndex("LocationId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("RMS.Models.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Cretaedat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updatedat")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SaleCampaignRecords", b =>
                {
                    b.Property<int>("TransactionDetailId")
                        .HasColumnType("int");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.HasKey("TransactionDetailId", "CampaignId");

                    b.HasIndex("CampaignId");

                    b.ToTable("SaleCampaignRecords");
                });

            modelBuilder.Entity("StockAdjustmentDetail", b =>
                {
                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("AdjustmentId")
                        .HasColumnType("int");

                    b.HasKey("StockId", "AdjustmentId");

                    b.HasIndex("AdjustmentId");

                    b.ToTable("StockAdjustmentDetail");
                });

            modelBuilder.Entity("StockTransferDetail", b =>
                {
                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("StockId", "TransferId");

                    b.HasIndex("TransferId");

                    b.ToTable("StockTransferDetail");
                });

            modelBuilder.Entity("ProductRackRecord", b =>
                {
                    b.HasOne("RMS.Models.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.Rack", null)
                        .WithMany()
                        .HasForeignKey("RackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMS.Models.Entities.CustomerFeedback", b =>
                {
                    b.HasOne("RMS.Models.Entities.SalesTransactionDetail", "SalesTransactionDetail")
                        .WithMany("CustomerFeedbacks")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesTransactionDetail");
                });

            modelBuilder.Entity("RMS.Models.Entities.CustomerLoyaltyRecord", b =>
                {
                    b.HasOne("RMS.Models.Entities.LoyaltyProgram", "LoyaltyProgram")
                        .WithMany("CustomerLoyaltyRecords")
                        .HasForeignKey("LoyaltyProgramId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.SalesTransactionDetail", "SalesTransactionDetail")
                        .WithMany("CustomerLoyaltyRecords")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LoyaltyProgram");

                    b.Navigation("SalesTransactionDetail");
                });

            modelBuilder.Entity("RMS.Models.Entities.DraftOrder", b =>
                {
                    b.HasOne("RMS.Models.Entities.Customer", "Customer")
                        .WithMany("DraftOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RMS.Models.Entities.DraftOrderDetail", b =>
                {
                    b.HasOne("RMS.Models.Entities.Discount", "Discount")
                        .WithMany("DraftOrderDetails")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.DraftOrder", "DraftOrder")
                        .WithMany("DraftOrderDetails")
                        .HasForeignKey("DraftOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.Product", "Product")
                        .WithMany("DraftOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("DraftOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RMS.Models.Entities.ExpenseTracking", b =>
                {
                    b.HasOne("RMS.Models.Entities.ExpenseCategory", "ExpenseCategory")
                        .WithMany("ExpenseTrackings")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.ProductPurchaseRecord", "ProductPurchaseRecord")
                        .WithMany("ExpenseTrackings")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.PurchaseReturn", "PurchaseReturn")
                        .WithMany("ExpenseTrackings")
                        .HasForeignKey("PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExpenseCategory");

                    b.Navigation("ProductPurchaseRecord");

                    b.Navigation("PurchaseReturn");
                });

            modelBuilder.Entity("RMS.Models.Entities.Product", b =>
                {
                    b.HasOne("RMS.Models.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RMS.Models.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RMS.Models.Entities.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("RMS.Models.Entities.ProductPurchaseRecord", b =>
                {
                    b.HasOne("RMS.Models.Entities.Location", "Location")
                        .WithMany("ProductPurchaseRecords")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.Product", "Product")
                        .WithMany("ProductPurchaseRecords")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.PurchaseRecord", "PurchaseRecord")
                        .WithMany("ProductPurchaseRecords")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.Supplier", "Supplier")
                        .WithMany("ProductPurchaseRecords")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("PurchaseRecord");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("RMS.Models.Entities.ProductTaxRecord", b =>
                {
                    b.HasOne("RMS.Models.Entities.Product", "Product")
                        .WithMany("ProductTaxRecords")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.Tax", "Tax")
                        .WithMany("ProductTaxRecords")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("RMS.Models.Entities.PurchaseReturn", b =>
                {
                    b.HasOne("RMS.Models.Entities.ProductPurchaseRecord", "ProductPurchaseRecord")
                        .WithMany("PurchaseReturns")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductPurchaseRecord");
                });

            modelBuilder.Entity("RMS.Models.Entities.Rack", b =>
                {
                    b.HasOne("RMS.Models.Entities.Location", "Location")
                        .WithMany("Racks")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RMS.Models.Entities.ReturnandExchange", b =>
                {
                    b.HasOne("RMS.Models.Entities.SalesTransactionDetail", "SalesTransactionDetail")
                        .WithMany("ReturnandExchanges")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesTransactionDetail");
                });

            modelBuilder.Entity("RMS.Models.Entities.SalesCommissionAgent", b =>
                {
                    b.HasOne("RMS.Models.Entities.SalesTransaction", null)
                        .WithMany("SalesCommissionAgents")
                        .HasForeignKey("SalesTransactionTransactionId");

                    b.HasOne("RMS.Models.Entities.SalesTransactionDetail", "SalesTransactionDetail")
                        .WithMany("SalesCommissionAgents")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.User", "User")
                        .WithMany("SalesCommissionAgents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesTransactionDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RMS.Models.Entities.SalesTransaction", b =>
                {
                    b.HasOne("RMS.Models.Entities.Customer", "Customer")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.User", "User")
                        .WithMany("SalesTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RMS.Models.Entities.SalesTransactionDetail", b =>
                {
                    b.HasOne("RMS.Models.Entities.Discount", "Discount")
                        .WithMany("SalesTransactionDetails")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.DraftOrderDetail", "DraftOrderDetail")
                        .WithOne("SalesTransactionDetail")
                        .HasForeignKey("RMS.Models.Entities.SalesTransactionDetail", "DraftOrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.Stock", "Stock")
                        .WithMany("SalesTransactionDetails")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.SalesTransaction", "SalesTransaction")
                        .WithMany("SalesTransactionDetails")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("DraftOrderDetail");

                    b.Navigation("SalesTransaction");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("RMS.Models.Entities.ShippingDetail", b =>
                {
                    b.HasOne("RMS.Models.Entities.SalesTransactionDetail", "SalesTransactionDetail")
                        .WithMany("ShippingDetails")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.StockTransfer", "StockTransfer")
                        .WithMany("ShippingDetails")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SalesTransactionDetail");

                    b.Navigation("StockTransfer");
                });

            modelBuilder.Entity("RMS.Models.Entities.Stock", b =>
                {
                    b.HasOne("RMS.Models.Entities.ProductPurchaseRecord", "ProductPurchaseRecord")
                        .WithMany("Stocks")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductPurchaseRecord");
                });

            modelBuilder.Entity("RMS.Models.Entities.StockAdjustment", b =>
                {
                    b.HasOne("RMS.Models.Entities.Location", "Location")
                        .WithMany("StockAdjustments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.PurchaseReturn", "PurchaseReturn")
                        .WithOne("StockAdjustment")
                        .HasForeignKey("RMS.Models.Entities.StockAdjustment", "PurchaseReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.ReturnandExchange", "ReturnandExchange")
                        .WithOne("StockAdjustment")
                        .HasForeignKey("RMS.Models.Entities.StockAdjustment", "SalesReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("PurchaseReturn");

                    b.Navigation("ReturnandExchange");
                });

            modelBuilder.Entity("RMS.Models.Entities.StockTransfer", b =>
                {
                    b.HasOne("RMS.Models.Entities.Location", "FromLocation")
                        .WithMany("FromStockTransfers")
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.Location", "ToLocation")
                        .WithMany("ToStockTransfers")
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("RMS.Models.Entities.Tax", b =>
                {
                    b.HasOne("RMS.Models.Entities.Location", "Location")
                        .WithMany("Taxes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RMS.Models.Entities.User", b =>
                {
                    b.HasOne("RMS.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SaleCampaignRecords", b =>
                {
                    b.HasOne("RMS.Models.Entities.MarketingCampaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.SalesTransactionDetail", null)
                        .WithMany()
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockAdjustmentDetail", b =>
                {
                    b.HasOne("RMS.Models.Entities.StockAdjustment", null)
                        .WithMany()
                        .HasForeignKey("AdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.Stock", null)
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StockTransferDetail", b =>
                {
                    b.HasOne("RMS.Models.Entities.Stock", null)
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMS.Models.Entities.StockTransfer", null)
                        .WithMany()
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMS.Models.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RMS.Models.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RMS.Models.Entities.Customer", b =>
                {
                    b.Navigation("DraftOrders");

                    b.Navigation("SalesTransactions");
                });

            modelBuilder.Entity("RMS.Models.Entities.Discount", b =>
                {
                    b.Navigation("DraftOrderDetails");

                    b.Navigation("Products");

                    b.Navigation("SalesTransactionDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.DraftOrder", b =>
                {
                    b.Navigation("DraftOrderDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.DraftOrderDetail", b =>
                {
                    b.Navigation("SalesTransactionDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("RMS.Models.Entities.ExpenseCategory", b =>
                {
                    b.Navigation("ExpenseTrackings");
                });

            modelBuilder.Entity("RMS.Models.Entities.Location", b =>
                {
                    b.Navigation("FromStockTransfers");

                    b.Navigation("ProductPurchaseRecords");

                    b.Navigation("Racks");

                    b.Navigation("StockAdjustments");

                    b.Navigation("Taxes");

                    b.Navigation("ToStockTransfers");
                });

            modelBuilder.Entity("RMS.Models.Entities.LoyaltyProgram", b =>
                {
                    b.Navigation("CustomerLoyaltyRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.Product", b =>
                {
                    b.Navigation("DraftOrderDetails");

                    b.Navigation("ProductPurchaseRecords");

                    b.Navigation("ProductTaxRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.ProductPurchaseRecord", b =>
                {
                    b.Navigation("ExpenseTrackings");

                    b.Navigation("PurchaseReturns");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("RMS.Models.Entities.PurchaseRecord", b =>
                {
                    b.Navigation("ProductPurchaseRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.PurchaseReturn", b =>
                {
                    b.Navigation("ExpenseTrackings");

                    b.Navigation("StockAdjustment")
                        .IsRequired();
                });

            modelBuilder.Entity("RMS.Models.Entities.ReturnandExchange", b =>
                {
                    b.Navigation("StockAdjustment")
                        .IsRequired();
                });

            modelBuilder.Entity("RMS.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RMS.Models.Entities.SalesTransaction", b =>
                {
                    b.Navigation("SalesCommissionAgents");

                    b.Navigation("SalesTransactionDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.SalesTransactionDetail", b =>
                {
                    b.Navigation("CustomerFeedbacks");

                    b.Navigation("CustomerLoyaltyRecords");

                    b.Navigation("ReturnandExchanges");

                    b.Navigation("SalesCommissionAgents");

                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.Stock", b =>
                {
                    b.Navigation("SalesTransactionDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.StockTransfer", b =>
                {
                    b.Navigation("ShippingDetails");
                });

            modelBuilder.Entity("RMS.Models.Entities.Supplier", b =>
                {
                    b.Navigation("ProductPurchaseRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.Tax", b =>
                {
                    b.Navigation("ProductTaxRecords");
                });

            modelBuilder.Entity("RMS.Models.Entities.User", b =>
                {
                    b.Navigation("SalesCommissionAgents");

                    b.Navigation("SalesTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
